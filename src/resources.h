/* Auto-generated by generate-resources.ts â€” do not edit by hand. */
#ifndef RESOURCES_H
#define RESOURCES_H

#include <stddef.h> /* size_t */
#include <stdint.h> /* uint32_t */

/* ===== Resource kinds (tag) ===== */
typedef enum {
  RES_KIND_IMAGE = 1,
  RES_KIND_FONT = 2,
  RES_KIND_ICON = 3,
} ResourceKind;

/* UV payload for images (used via pointer, may be NULL) */
typedef struct ResourceUV {
  float u0, v0, u1, v1;
} ResourceUV;

/* Tagged union for all embedded resources */
typedef struct EmbeddedBlob {
  const unsigned char *data;
  size_t size;
  const char *name;
  ResourceKind kind;
  union {
    struct {
      const ResourceUV *uv; /* NULL if not provided */
    } image;
    struct {
      int _unused; /* room for future font-specific metadata */
    } font;
    struct {
      uint32_t fill;   /* RGBA color in 0xRRGGBBAA format */
      uint32_t stroke; /* RGBA color in 0xRRGGBBAA format */
    } icon;
  } as;
} EmbeddedBlob;

/* ===== Per-kind IDs ===== */
typedef enum { RES_IMG_WIN, RES_IMG_COUNT } ResourceImageId;

typedef enum {
  RES_FONT_LATO_REGULAR,
  RES_FONT_FIRA_MONO,
  RES_FONT_ARIAL,
  RES_FONT_SERIF,
  RES_FONT_COUNT
} ResourceFontId;

typedef enum {
  RES_ICON_SUN,
  RES_ICON_MOON,
  RES_ICON_HISTORY,
  RES_ICON_TRASH,
  RES_ICON_ARROW_DOWN_CIRCLE,
  RES_ICON_TURN_UP_RIGHT,
  RES_ICON_COUNT
} ResourceIconId;

/* ===== Unified index & iteration macros ===== */
#define RES_COUNT (RES_IMG_COUNT + RES_FONT_COUNT + RES_ICON_COUNT)
#define RES_FIRST_IMAGE 0
#define RES_LAST_IMAGE (RES_FIRST_IMAGE + RES_IMG_COUNT - 1)
#define RES_FIRST_FONT (RES_LAST_IMAGE + 1)
#define RES_LAST_FONT (RES_FIRST_FONT + RES_FONT_COUNT - 1)
#define RES_FIRST_ICON (RES_LAST_FONT + 1)
#define RES_LAST_ICON (RES_FIRST_ICON + RES_ICON_COUNT - 1)
#define RES_INDEX_IMAGE(id) (RES_FIRST_IMAGE + (id))
#define RES_INDEX_FONT(id) (RES_FIRST_FONT + (id))
#define RES_INDEX_ICON(id) (RES_FIRST_ICON + (id))
#define RES_FOR_EACH_IMAGE(idvar)                                              \
  for (int idvar = 0; idvar < RES_IMG_COUNT; ++idvar)
#define RES_FOR_EACH_FONT(idvar)                                               \
  for (int idvar = 0; idvar < RES_FONT_COUNT; ++idvar)
#define RES_FOR_EACH_ICON(idvar)                                               \
  for (int idvar = 0; idvar < RES_ICON_COUNT; ++idvar)

static const unsigned char res_win_png[] = {
#embed "../resources/images/win.png"
};
static const unsigned char res_lato_regular_ttf[] = {
#embed "../resources/fonts/Lato-Regular.ttf"
};
static const unsigned char res_firacode_retina_ttf[] = {
#embed "../resources/fonts/FiraCode-Retina.ttf"
};
static const unsigned char res_arial_ttf[] = {
#embed "../resources/fonts/ARIAL.TTF"
};
static const unsigned char res_ibmplexserif_regular_ttf[] = {
#embed "../resources/fonts/IBMPlexSerif-Regular.ttf"
};
static const unsigned char res_sun_max_fill_svg[] = {
#embed "../resources/icons/sun.max.fill.svg"
    , 0 /* null terminator for SVG strings */
};
static const unsigned char res_moon_fill_svg[] = {
#embed "../resources/icons/moon.fill.svg"
    , 0 /* null terminator for SVG strings */
};
static const unsigned char res_clock_arrow_circlepath_svg[] = {
#embed "../resources/icons/clock.arrow.circlepath.svg"
    , 0 /* null terminator for SVG strings */
};
static const unsigned char res_trash_svg[] = {
#embed "../resources/icons/trash.svg"
    , 0 /* null terminator for SVG strings */
};
static const unsigned char res_arrow_down_circle_svg[] = {
#embed "../resources/icons/arrow.down.circle.svg"
    , 0 /* null terminator for SVG strings */
};
static const unsigned char res_arrow_turn_up_right_svg[] = {
#embed "../resources/icons/arrow.turn.up.right.svg"
    , 0 /* null terminator for SVG strings */
};

static const EmbeddedBlob g_embedded_resources[RES_COUNT] = {
    [RES_INDEX_IMAGE(RES_IMG_WIN)] = {res_win_png,
                                      sizeof(res_win_png),
                                      "win.png",
                                      RES_KIND_IMAGE,
                                      {.image = {NULL}}},
    [RES_INDEX_FONT(RES_FONT_LATO_REGULAR)] = {res_lato_regular_ttf,
                                               sizeof(res_lato_regular_ttf),
                                               "Lato-Regular.ttf",
                                               RES_KIND_FONT,
                                               {.font = {0}}},
    [RES_INDEX_FONT(RES_FONT_FIRA_MONO)] = {res_firacode_retina_ttf,
                                            sizeof(res_firacode_retina_ttf),
                                            "FiraCode-Retina.ttf",
                                            RES_KIND_FONT,
                                            {.font = {0}}},
    [RES_INDEX_FONT(RES_FONT_ARIAL)] = {res_arial_ttf,
                                        sizeof(res_arial_ttf),
                                        "ARIAL.TTF",
                                        RES_KIND_FONT,
                                        {.font = {0}}},
    [RES_INDEX_FONT(RES_FONT_SERIF)] = {res_ibmplexserif_regular_ttf,
                                        sizeof(res_ibmplexserif_regular_ttf),
                                        "IBMPlexSerif-Regular.ttf",
                                        RES_KIND_FONT,
                                        {.font = {0}}},
    [RES_INDEX_ICON(RES_ICON_SUN)] = {res_sun_max_fill_svg,
                                      sizeof(res_sun_max_fill_svg),
                                      "sun.max.fill.svg",
                                      RES_KIND_ICON,
                                      {.icon = {0x808080FF, 0x808080FF}}},
    [RES_INDEX_ICON(RES_ICON_MOON)] = {res_moon_fill_svg,
                                       sizeof(res_moon_fill_svg),
                                       "moon.fill.svg",
                                       RES_KIND_ICON,
                                       {.icon = {0x808080FF, 0x808080FF}}},
    [RES_INDEX_ICON(RES_ICON_HISTORY)] = {res_clock_arrow_circlepath_svg,
                                          sizeof(
                                              res_clock_arrow_circlepath_svg),
                                          "clock.arrow.circlepath.svg",
                                          RES_KIND_ICON,
                                          {.icon = {0x808080FF, 0x808080FF}}},
    [RES_INDEX_ICON(RES_ICON_TRASH)] = {res_trash_svg,
                                        sizeof(res_trash_svg),
                                        "trash.svg",
                                        RES_KIND_ICON,
                                        {.icon = {0x808080FF, 0x808080FF}}},
    [RES_INDEX_ICON(
        RES_ICON_ARROW_DOWN_CIRCLE)] = {res_arrow_down_circle_svg,
                                        sizeof(res_arrow_down_circle_svg),
                                        "arrow.down.circle.svg",
                                        RES_KIND_ICON,
                                        {.icon = {0x808080FF, 0x808080FF}}},
    [RES_INDEX_ICON(
        RES_ICON_TURN_UP_RIGHT)] = {res_arrow_turn_up_right_svg,
                                    sizeof(res_arrow_turn_up_right_svg),
                                    "arrow.turn.up.right.svg",
                                    RES_KIND_ICON,
                                    {.icon = {0x808080FF, 0x808080FF}}},
};

/* ===== Quick access macros ===== */
#define RES_GET(index) (&g_embedded_resources[index])
#define RES_GET_IMAGE(id) (&g_embedded_resources[RES_INDEX_IMAGE(id)])
#define RES_GET_FONT(id) (&g_embedded_resources[RES_INDEX_FONT(id)])
#define RES_GET_ICON(id) (&g_embedded_resources[RES_INDEX_ICON(id)])
#define RES_GET_IMAGE_DATA(id) (g_embedded_resources[RES_INDEX_IMAGE(id)].data)
#define RES_GET_IMAGE_SIZE(id) (g_embedded_resources[RES_INDEX_IMAGE(id)].size)
#define RES_GET_IMAGE_UV(id)                                                   \
  (g_embedded_resources[RES_INDEX_IMAGE(id)].as.image.uv)
#define RES_GET_FONT_DATA(id) (g_embedded_resources[RES_INDEX_FONT(id)].data)
#define RES_GET_FONT_SIZE(id) (g_embedded_resources[RES_INDEX_FONT(id)].size)
#define RES_GET_ICON_DATA(id) (g_embedded_resources[RES_INDEX_ICON(id)].data)
#define RES_GET_ICON_SIZE(id) (g_embedded_resources[RES_INDEX_ICON(id)].size)
#define RES_GET_ICON_FILL(id)                                                  \
  (g_embedded_resources[RES_INDEX_ICON(id)].as.icon.fill)
#define RES_GET_ICON_STROKE(id)                                                \
  (g_embedded_resources[RES_INDEX_ICON(id)].as.icon.stroke)

#endif /* RESOURCES_H */
